name: Flutter_iOS_Build_And_Test

on:
  push:
    branches: [main]

jobs:
  flutter_test:
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v2
          with:
            distribution: 'zulu'
            java-version: '11'
        - uses: subosito/flutter-action@v1
          with:
            flutter-version: '2.10.5'

        - name: Get all Flutter Packages
          run: flutter pub get

        - name: Run Flutter Test
          run: flutter test
  
  ios_build:
    needs: flutter_test
    runs-on: macos-latest

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Checkout the code
        uses: actions/checkout@v2

      # - name: Install Apple Certificate
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.P12_BASE64 }}
      #     p12-password: ${{ secrets.P12_PASSWORD }}
      
      # - name: Install the provisioning profile
      #   env:
      #     PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      #   run: |
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

      #     echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH

      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64  }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install and set Flutter version
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.10.5'

      - name: Clean packages
        run: flutter clean

      - name: Restore packages
        run: flutter pub get

      # - name: Build Flutter
      #   run: flutter build ios --release --no-codesign

      # - name: Build resolve Swift dependencies
      #   run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release

      # - name: Build xArchive
      #   run: |
      #     xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=6S9P5XMDA2 -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=d8e9a64c-ea45-4a5f-9a94-300e063e19f1 clean archive CODE_SIGN_IDENTITY="iPhone Distribution: PSG Securities Ltd (6S9P5XMDA2)"
      
      # - name: Export ipa
      #   run: xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist
      #   # run: xcodebuild -exportArchive -archivePath MobileTest.xcarchive -exportPath MobileTest -exportFormat ipa -exportProvisioningProfile ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
      #   # hello

      # - name: Publish iOS Artefacts
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: release-ios
      #     path: build-output/ios

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

        # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
         name: release-ipa
         # Path to the release files
         path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      

